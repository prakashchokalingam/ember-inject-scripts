{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/utils/inject-scripts-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/inject-scripts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/inject-scripts.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/inject-scripts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/inject-scripts-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/utils/inject-scripts-test', ['exports', 'dummy/utils/inject-scripts', 'qunit'], function (exports, _dummyUtilsInjectScripts, _qunit) {\n\n  var scripts = [{\n    id: 'lodash',\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.5/lodash.js',\n    attributes: [{\n      name: 'data-library',\n      value: 'lodash'\n    }]\n  }, {\n    id: 'vuejs',\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js',\n    attributes: [{\n      name: 'data-library',\n      value: 'vuejs'\n    }]\n  }, {\n    id: 'inline',\n    inline: 'console.log(\\'inline script rendered\\')',\n    attributes: [{\n      name: 'data-inline',\n      value: 'true'\n    }]\n  }, {\n    id: 'vuejs',\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js',\n    attributes: [{\n      name: 'data-library',\n      value: 'vuejs'\n    }],\n    once: true\n  }];\n\n  var script = {\n    id: 'vuejs',\n    src: 'https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js',\n    attributes: [{\n      name: 'data-library',\n      value: 'vuejs'\n    }]\n  };\n\n  (0, _qunit.module)('Unit | Utility | inject scripts');\n\n  // multiple Scripts\n\n  (0, _qunit.test)('it injects the given multiple scripts', function (assert) {\n    var done = assert.async();\n    (0, _dummyUtilsInjectScripts['default'])(scripts).then(function (data) {\n      // Inject script then holds event for all given scripts\n      assert.equal(data.length, scripts.length, 'Inject script then holds event for all given scripts in then() arguments');\n      // Inject scripts loads only once if once option is true\n      var lastResult = data[scripts.length - 1];\n      assert.ok(lastResult.hasOwnProperty('target'), 'Inject scripts loads only once if once option is set to true and return target');\n      done();\n    });\n    // it injected the given script\n    var testSelector = '[data-test-script=' + scripts[0].id + ']';\n    var $scriptEl = document.querySelector(testSelector);\n    assert.ok($scriptEl, 'Injected the script with the selector ' + testSelector);\n\n    // it injected the given script with the given attributes\n    var attributeSelector = '[data-library=' + scripts[1].id + ']';\n    $scriptEl = document.querySelector(testSelector);\n    assert.ok($scriptEl, 'Injected the script with attributes - ' + attributeSelector);\n\n    // it injected the given inline script\n    testSelector = '[data-test-script=' + scripts[2].id + ']';\n    $scriptEl = document.querySelector(testSelector);\n    assert.ok($scriptEl, 'Injected the inline script with the selector ' + testSelector);\n  });\n\n  (0, _qunit.test)('it injects the given single script', function (assert) {\n    var done = assert.async();\n    (0, _dummyUtilsInjectScripts['default'])(script).then(function (data) {\n      // Inject script then holds event for the scripts\n      assert.ok(data.hasOwnProperty('target'), 'Inject script then holds event for the given scripts in then() arguments');\n      done();\n    });\n\n    // it injected the given inline script\n    var testSelector = '[data-test-script=' + script.id + ']';\n    var $scriptEl = document.querySelector(testSelector);\n    assert.ok($scriptEl, 'Injected the inline script with the selector ' + testSelector);\n  });\n\n  (0, _qunit.test)('it injects the given single inline script', function (assert) {\n    var script = scripts[2];\n    (0, _dummyUtilsInjectScripts['default'])(script);\n\n    // it injected the given inline script\n    var testSelector = '[data-test-script=' + script.id + ']';\n    var $scriptEl = document.querySelector(testSelector);\n    assert.ok($scriptEl, 'Injected the inline script with the selector ' + testSelector);\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;","file":"tests.js"}